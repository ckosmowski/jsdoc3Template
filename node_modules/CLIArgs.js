/**
 * @overview Definition of CLIArgs a singleton that provide define CLI Arguments
 * @author Daniel Goberitz <dalgo86@gmail.com>
 */
var events = require('events')


/**
 * @private
 * @desc Identifies if the argument name is valid, spaces and non word 
 *       characters are not acepted. 
 * @param {String} argName
 * @return {Boolean}
 */
function isValid(argName){
	var r = /[\s\W]/;
	return argName.match(r) === null;
}

/**
 * @namespace CLIArgs
 * @desc Singleton that provide set cli arguments and get the value of this
 * @borrows events.EventEmitter.on as on
 * @borrows events.EventEmitter.emit as emit
 */
var CLIArgs = {
	detected: [],
	argsData: {},
	argsHelp: {},
	argsRegistered: [],
	binded: {},
	bindedInverse: {},
	publisher: new events.EventEmitter,
	nextIsData: false,
	argToData: null,
	
	/**
	 * @desc Event listener
	 * @see events.EventEmitter.on
	 * @link http://nodejs.org/api/events.html#events_class_events_eventemitter
	 */
	on: function(){
		return this.publisher.on.apply(this.publisher, arguments);
	},

	/**
	 * @desc Event trigger
	 * @see events.EventEmitter.emit
	 * @link http://nodejs.org/api/events.html#events_class_events_eventemitter
	 */
	emit: function(){
		return this.publisher.emit.apply(this.publisher, arguments);
	},
	
	/**
	 * @desc Adds an argument to be changed via console arguments
	 * 
	 * @param {SargName} argName Name of the argument spaces and non word 
	 *        characters are not acepted. 
	 * @param {String} helpText Description of the argument to show in help page
	 * @param {Boolean} [hasValue] Defines if this argument must get value or 
	 *         simply is an argument that actues for be present
	 * @param {String|Boolean} [defaultValue=false] If hasValue is true, this is 
	 *        the value to be setted as a defaultValue for this argument
	 * 
	 * @return {CLIArgs} 
	 */
	add: function(argName, helpText, hasValue, defaultValue){
		if(!isValid(argName)){
			throw argName + ' is not a valid argument.';
		}
		this.argsHelp[argName] = helpText;
		this.argsRegistered.push(argName);
		if(hasValue === true){
			
			if(undefined === defaultValue){
				defaultValue = false;
			}
			
			this.argsData[argName] = defaultValue;
		}
		return this;
	},
	
	/**
	 * @desc Binds a short argName to a long argName
	 * @example CLIArgs.bind('p', 'port'); // cmd -p 3333 OR cmd --port 3333
	 * 
	 * @param {Char} shortArg A character to be binded to an long argName
	 * @param {SargName} argName Argument Name to be binded
	 */
	bind: function(shortArg, argName){
		if(shortArg.length === 1){
			this.binded[shortArg] = argName;
			if(undefined === this.bindedInverse[argName]){
				this.bindedInverse[argName] = [];
			}
			this.bindedInverse[argName].push(shortArg);
		}else{
			throw 'CLIArgs::bind only accepts a character to shortArg';
		}
	},
	
	/**
	 * @desc Process the Arguments obtained in the execution command, and adds 
	 * the help arguments if is received, show the help and exit.
	 * 
	 * @fires CLIArgs.processed
	 */
	process: function(){
		this.add('help', 'Show this Help Page');
		this.bind('h', 'help');
		
		var me = this;
		process.argv.forEach(function(arg){
			me._processArg(arg);
		});

		// process Algorithm
		
		if(this.has('help')){
			// write help
			this.writeArgsHelp();
			process.exit();
		}
		
		this.emit('processed');
	},
	
	/**
	 * @protected
	 * @desc Process an argument
	 * 
	 * @param {String} arg Children of process.argv
	 */
	_processArg: function(arg){
		if(arg.charAt(0) === '-' && this.nextIsData){
			this.error('Se esperaban datos para el argumento ' + this.argToData);
			process.exit(1);
		}

		if(this.nextIsData){
			this.argsData[this.argToData] = arg;
			this.nextIsData = false;
		}
		if(arg.length === 2){
			this._processShortArg(arg.replace('-', ''));
			return;
		}else if(arg.charAt(0) === '-' && arg.charAt(1) === '-'){
			arg = arg.replace('--', '');
			this.detected.push(arg);
			if(undefined !== this.argsData[arg]){
				this.nextIsData = true;
				this.argToData = arg;
			}
		}
	},
	
	/**
	 * @protected
	 * @desc Process a shortArg
	 * 
	 * @param {Char} shortArg
	 */
	_processShortArg: function(shortArg){
		if(undefined !== this.binded[shortArg]){
			var arg = this.binded[shortArg];
			this._processArg('--' + arg);
		}
	},
	
	/**
	 * @desc Print the help page in the stdout
	 */
	writeArgsHelp: function(){
		var arg, helpText, i;
		process.stdout.write('# HELP PAGE\n\n  Arguments:\n\n');
		
		this.argsRegistered.sort();
		
		for( i = 0; i < this.argsRegistered.length; i++){
			arg = this.argsRegistered[i];
			helpText = this.argsHelp[arg];
				
			process.stdout.write('  --' + arg);

			if(undefined !== this.argsData[arg]){
				process.stdout.write(' [VALUE]');
			}else{
				process.stdout.write('\t');
			}
			process.stdout.write('\t' + helpText);

			if(undefined !== this.bindedInverse[arg]){
				process.stdout.write('\n    Aliases: -' + this.bindedInverse[arg].join(', -'));
			}

			process.stdout.write('\n\n');
		}
	},

	/**
	 * @desc Check if the argName be getted in the execution command, if an 
	 * argument that receive a value, this value will be returned, false in 
	 * case this arguments has not been received.
	 * 
	 * @param {SargName} argName Argument Name to be checked
	 * 
	 * @return {*}
	 */
	has: function(argName){
		if(this.detected.indexOf(argName) !== -1){
			if(undefined !== this.argsData[argName]){
				return this.argsData[argName];
			}else{
				return true;
			}
		}else{
			if(undefined !== this.argsData[argName]){
				return this.argsData[argName];
			}
		}
		
		return false;
	}
};

module.exports = CLIArgs;

/**
 * @name SargName
 * @type {String}
 * @desc Identifies an Argument Name spaces and non word characters are not 
 *       acepted. 
 */

/**
 * @event CLIArgs.processed
 * @desc Occurs when the CLIArgs singletons ends to process the arguments.
 */
