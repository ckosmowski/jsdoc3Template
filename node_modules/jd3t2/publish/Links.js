var TAFFY = require('taffydb').taffy,
	Links = function(publisher){
		this.publisher = publisher;
		this.dbReferences = TAFFY();
		this.db = this.publisher.db;
	}
;

Links.prototype = {
	publisher: null,
	dbReferences: null,
	db: null,
	
	/**
	 * @desc Add reference to a doclet, and return a link to destination
	 */
	addReference: function(doclet){
		var href, r = this.referenceExists(doclet);

		if(r.length > 0){
			return r[0].href;
		}
		
		switch(doclet.kind){
			case 'method':
			case 'function':
				href = this.getLinkByNameNKind(doclet.memberof, ['class', 'namespace']);
				href += doclet.name
			break;
		}
		
		this.dbReferences.insert({
			___id: doclet.___id,
			kind: doclet.kind,
			name: doclet.name,
//			memberof: doclet.memberof,
			href: href
		});
		
		this.db({___id: doclet.___id}).update({'href': href});
	
		return href;
	},
	
	referenceExists: function(doclet){
		return this.dbReferences({___id: doclet.___id}).get();
	},
	
	/**
	 * @desc Search the doclet with name given and returns the link
	 * 
	 */
	getLinkByNameNKind: function(name, kind){
		var query = {name:name};
		if(kind){
			query.kind = kind;
		}
		var qObj = this.dbReferences(query);
		if(qObj.count() > 0){
			return qObj.get()[0].href;
		}else{
			return this.addReference( this.db( query ).get() );
		}
	},
	
	getLink: function(doclet){
		var r = this.referenceExists(doclet);

		if(r.length > 0){
			return r[0].href;
		}else{
			return this.addReference(doclet);
		}
	}
};

module.exports = Links;