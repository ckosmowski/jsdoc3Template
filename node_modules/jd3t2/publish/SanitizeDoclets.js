var SanitizeDoclets = function(publisher){
		this.publisher = publisher;
		this.db = this.publisher.db;
	}
;

SanitizeDoclets.prototype = {
	publisher: null,
	db: null,
	
	process: function(){
		var count = this.db().count(),
			me = this
		;
		this.publisher.log('info', 'Initializing Sanitization');
		this.publisher.log('debug', 'Doclets to parse: ' + count);
		
		var step = Math.ceil(count / 10);
		if(step > 50){step = 50;}

		this.db().each(function(doclet, ix){
			if((ix%step) === 0){
				me.publisher.log('debug', 'Iterated: ' + ix + '/' + count);
			}
			try{
				me.processDoclet(doclet);
			}catch(e){
				me.publisher.log('error', 'Processing doclet: ' + doclet.longname, e);
				me.publisher.log('error', e);
			}
		});
		
		this.addVoidReturnToMethods();
	},
	
	processDoclet: function(doclet){
		if(undefined === doclet.memberof){
			doclet.memberof = '__global__'; //create de fucking key to filter with TAFFYDB
		}
		
		
	},
	
	addVoidReturnToMethods: function(){
		this.db({
			kind: ['function', 'event'],
			returns: [{isUndefined: true}, {isNull: true}]
		}).update({
			returns: [{
				type: {
					names: ['void'],
					optional: [],
					nullable: [],
					variable: []
				}
			}]
		});
	}
};

module.exports = SanitizeDoclets;