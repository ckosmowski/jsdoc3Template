console.log('jd3t2');

var CLIArgs = require('CLIArgs'),
	Deferred = require('deferreds').Deferred,
	jsdoc3Exec = require('./jsdoc3Exec'),
	child_process = require('child_process'),
	path = require('path'),
	events = require('events'),
	util = require('util')
;

/**
 * @class
 * @extends events.EventEmitter
 * @classdesc A job for create documentation, runs on a separate child process
 * @desc Public interface for createDocs Child process
 */
function JD3Template(inPath, outPath){
	this.inPath = path.normailze(inPath);
	this.outPath = path.normailze(outPath);
	this.privateMembers = false;
	this.includeSources();
}

util.inherits(JD3Template, events.EventEmitter);

JD3Template.prototype.inPath = null;
JD3Template.prototype.outPath = null;
JD3Template.prototype.tutorialPath = null;
JD3Template.prototype.sourcesIncluded = null;
JD3Template.prototype.privateMembers = null;

JD3Template.prototype.setTutorialPath = function(tPath){
	this.tutorialPath = path.normailze(tPath);
};

JD3Template.prototype.includeSources = function(){
	this.sourcesIncluded = true;
};

JD3Template.prototype.notIncludeSources = function(){
	this.sourcesIncluded = false;
};

JD3Template.prototype.exec = function(){
	var deferred = new Deferred();

	var args =	[
			'-i ' + this.inPath,
			'-O ' + this.outPath,
			'--child'
		], 
		job, 
		jsdocPromise, 
		me = this
	;
	
	if(this.tutorialPath){
		args.push('-T ' + this.tutorialPath);
	}
	if(!this.sourcesIncluded){
		args.push('--notIncludeSources');
	}
	if(this.privateMembers){ // add private members to documentation
		args.push('--private');
	}
	
	this.log('info', 'Initializing template child process');
	
	job = child_process.fork(
		'./createDocs', 
		args
	);
		
	this.log('info', 'Initializing jsdoc child process');
	
	jsdocPromise = jsdoc3Exec(this.inPath);
	jsdocPromise.done(function(data){
		me.log('debug', 'Sending data to template child process');
		job.send('data', data);
	});
	jsdocPromise.fail(function(err){
		me.log('error', 'jsdoc process has an error');
		me.log('error', err);
		job.exit('SIGHUP');
		me.emit('error', err);
	});
	
	job.on('exit', function(code, signal){
		if(code === 0 && signal !== 'SIGHUP'){
			me.log('success', 'Documentation Ready!');
			me.emit('sucess');
		}
	});
	job.on('error', function(err){
		me.log('error', err);
		me.emit('error', err);
	});
};

JD3Template.prototype.log = function(level, msg){
	this.emit('log', {level: level, msg: msg});
}

module.exports = JD3Template;