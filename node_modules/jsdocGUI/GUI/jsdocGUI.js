(function(){
	var nwWindow,
		$,
		document,
		Actions = require('./Actions'),
		keyboardHandler = require('./keyboard'),
		publisher,
		jsdoc3Exec,
		jsdocGUI
	;
	
	function build(){
		publisher = require('jd3t2/publisher');
		jsdoc3Exec = require('jd3t2/jsdoc3Exec');
		
		publisher.init({
			in_path: $('#sourceFolder').val(),
			out_path: $('#outputFolder').val(),
			tmp_path: process.cwd() + '/tmp',
			tutorial_path: $('#tutorialFolder').val(),
			includeSources: true,
			privates: true
		});
		
		jsdoc3Exec($('#sourceFolder').val())
			.done(function(data){
				console.log('IN JSON:', data);
				publisher.process(data.doclets);
			})
			.fail(function(err){
				console.error(err);
			})
		;
	}
	
	//@todo Document!
	jsdocGUI = {
		actions: null,
		modals: null,
		
		init: function(){
			nwWindow = nwrequire('nw.gui').Window.get();
			$ = nwWindow.window.jQuery;
			document = nwWindow.window.document;
			
			keyboardHandler.init();

			this.actions = new Actions($);
			this.modals = {};

			this.addEventListeners();
			this.createActions();
			this.bindKeys();
			this.createModals();
			
			
			//@todo REMOVE FROM HERE, create a compononet for this
			console.log('Adding functionality to browse directory buttons');
			$('input[type="file"]').each(function(){
				var chooser = $(this);
				chooser.attr('nwworkingdir', process.cwd());
				chooser.siblings('button').click(function(){
					
					chooser.trigger('click');            
					chooser.change(function(evt) {
						if(chooser.val() != ''){
							chooser.attr('nwworkingdir', chooser.val());
							chooser.siblings('input').val(chooser.val());
							console.log($(this).val());
						}
					});
				});
			});
			
		},
		
		_reset: function(){
			var module;
			for(module in global.require.cache){
				if(global.require.cache.hasOwnProperty(module)){
					delete global.require.cache[module];
				}
			}
			nwWindow.reloadIgnoringCache();
		},
		
		addEventListeners: function(){
			console.log('Preventing Close with out confirmation');
			nwWindow.on('close', function() {
				jsdocGUI.modals.close.modal('show');
				return false;
			});
		},
		createActions: function(){
			console.log('Creating Actions');
			this.actions.addAction('CLOSE_ACTION', function(){
				nwWindow.close();
			});
			this.actions.addAction('FORCE_CLOSE_ACTION', function(){
				nwWindow.close(true);
			});
			this.actions.addAction('MINIMIZE_ACTION', function(){
				nwWindow.minimize();
			});
			this.actions.addAction('BUILD_ACTION', function(){
				build();
			});
			
			if(global.DEBUG_MODE){
				this.actions.addAction('DEVTOOLS_ACTION', function(){
					nwWindow.showDevTools();
				});
				this.actions.addAction('REFRESH_ACTION', this._reset);
				$('.REFRESH_ACTION,.DEVTOOLS_ACTION').removeClass('hidden');
			}
		},
		
		bindKeys: function(){
			console.log('Binding Keys');
			$(document).bind('Key.F12', function(event){
				jsdocGUI.actions.exec('DEVTOOLS_ACTION');
			});
			$(document).bind('Key.Esc', function(event){
				jsdocGUI.actions.exec('CLOSE_ACTION');
			});
			$(document).bind('Key.F5', function(event){
				jsdocGUI.actions.exec('REFRESH_ACTION');
			});
		},
		
		createModals: function(){
			console.log('Creating Modals');
			this.modals.close = $('#closeModal').modal({
				backdrop: true,
				keyboard: false,
				show: false
			});
		}
	};
	
	module.exports = jsdocGUI;
}());